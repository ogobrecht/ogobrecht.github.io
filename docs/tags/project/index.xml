<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>project on Ottmar’s Notes</title>
    <link>https://ogobrecht.github.io/tags/project/</link>
    <description>Recent content in project on Ottmar’s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 10 Jan 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ogobrecht.github.io/tags/project/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PLOC - Convert PL/SQL Code into Markdown Docs</title>
      <link>https://ogobrecht.github.io/posts/2019-01-10-ploc-plsql-code-to-doc-converter/</link>
      <pubDate>Thu, 10 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ogobrecht.github.io/posts/2019-01-10-ploc-plsql-code-to-doc-converter/</guid>
      <description>Some months ago I had to write a README file with Markdown syntax for a PL/SQL open source project. I changed function and procedure parameters of the package often during the implementation. Therefore, maintaining the documentation was no fun in the beginning. Maybe you know this from your own (payed) projects ;-)
Normally in the business world I see minimalistic comments in the code and a dedicated documentation independent of the code.</description>
    </item>
    
    <item>
      <title>PLEX - PL/SQL Export Utilities</title>
      <link>https://ogobrecht.github.io/posts/2018-08-26-plex-plsql-export-utilities/</link>
      <pubDate>Sun, 26 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ogobrecht.github.io/posts/2018-08-26-plex-plsql-export-utilities/</guid>
      <description>PLEX is a standalone PL/SQL package with export utilities. It was created to be able to quickstart version control for existing (APEX) apps and depends on APEX 5.1.4 or later for APEX_EXPORT and APEX_ZIP. It currently has two main functions called BackApp and Queries_to_CSV. Queries_to_CSV is used by BackApp as a helper function, but its functionality is also useful as a standalone. This post is all about BackApp, which has the following features:</description>
    </item>
    
    <item>
      <title>HydeBar</title>
      <link>https://ogobrecht.github.io/posts/2017-11-29-hydebar/</link>
      <pubDate>Wed, 29 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ogobrecht.github.io/posts/2017-11-29-hydebar/</guid>
      <description>Earlier this year I wrote at the end of this post:
 P.S.: In the meantime I switched complete to Markdown and Jekyll, a static site generator - but this is another story for another post &amp;hellip;
 As always - it took a bit longer then expected. In the meantime I was fiddling around with Jekyll and modifying the default theme Minima to my needs. Then I stumbled over the JSDoc theme Minami and the Liquid docs site - both with nice sidebars.</description>
    </item>
    
    <item>
      <title>Oracle DB 11gXE Install File Swap Check Disabler</title>
      <link>https://ogobrecht.github.io/posts/2017-06-13-ora11xe-install-file-swap-check-disabler/</link>
      <pubDate>Tue, 13 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ogobrecht.github.io/posts/2017-06-13-ora11xe-install-file-swap-check-disabler/</guid>
      <description>Many people have problems to install Oracle 11XE in a Docker environment because the install file checks the available swap space in the container. In a container environment this fails often - see here or here, because the swap space is optimized for the entire stack and not controlled from within the operating system of the container.
We have to disable the swap space check in the installation file. I wrote another blog post about this.</description>
    </item>
    
    <item>
      <title>jQuery Plugin svg2img</title>
      <link>https://ogobrecht.github.io/posts/2017-04-03-jquery-plugin-svg2img/</link>
      <pubDate>Mon, 03 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ogobrecht.github.io/posts/2017-04-03-jquery-plugin-svg2img/</guid>
      <description>SVG based charts and visualizations are often used these days. But what if you want to use your browser inline SVGs, generated with some sort of JavaScript and fancy styled with CSS, offline - maybe in a presentation, send by email or printed out large scaled?
You can create a screenshot, of course. But does this look nice when it comes to scaling? You can try to copy the HTML code of the SVG and wrap it into a correct SVG container, but then you will loose in the most cases the stylings, as normally not all CSS definitions are directly attached to the SVG elements.</description>
    </item>
    
    <item>
      <title>APEX Plugin dhtmlxGantt</title>
      <link>https://ogobrecht.github.io/posts/2017-03-14-apex-plugin-dhtmlx-gantt/</link>
      <pubDate>Tue, 14 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ogobrecht.github.io/posts/2017-03-14-apex-plugin-dhtmlx-gantt/</guid>
      <description>Some weeks ago I was asked, if I can create a plugin for the Gantt chart library from dhtmlx.com. I had a look at the library and I thought that it should be possible.
Because all my plugin developments are free time projects it took a while. Now the first public version is available. It is based on the GPLv2 version of the library, which has a reduced set of functionality.</description>
    </item>
    
    <item>
      <title>DokuWiki Plugin Reveal.js</title>
      <link>https://ogobrecht.github.io/posts/2017-03-05-dokuwiki-plugin-revealjs/</link>
      <pubDate>Sun, 05 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ogobrecht.github.io/posts/2017-03-05-dokuwiki-plugin-revealjs/</guid>
      <description>DokuWiki is very good for creating documentation in a team. It is PHP based, needs less resources and is running without a database only on files on nearly every webserver. If your infrastructure is crashed for whatever reason and you have at least access to the files (on the webserver or in a backup) you can read your documentation with a simple text editor, because DokuWiki&amp;rsquo;s syntax is designed to be readable as possible without any rendering to HTML.</description>
    </item>
    
    <item>
      <title>Markdown Reporter</title>
      <link>https://ogobrecht.github.io/posts/2017-01-23-markdown-reporter/</link>
      <pubDate>Mon, 23 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ogobrecht.github.io/posts/2017-01-23-markdown-reporter/</guid>
      <description>On the APEX connect 2016 in Berlin I talked about my APEX Markdown plugin and fine art printing with the help of Pandoc and LaTeX. When I was preparing my slides and documenting a SQL query in a Markdown code block I asked myself:
What, if the database is taking this Markdown code block and runs the query inside to convert it into data?
And what, if I take this Markdown text with the data in the code blocks and post it to a small webservice which converts the data blocks into charts and the whole document into HTML or a LaTeX based PDF?</description>
    </item>
    
    <item>
      <title>Table API Generator</title>
      <link>https://ogobrecht.github.io/posts/2016-06-10-table-api-generator/</link>
      <pubDate>Fri, 10 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ogobrecht.github.io/posts/2016-06-10-table-api-generator/</guid>
      <description>Last year I needed for a project a simple table API, which is able to generate a generic change log - something like &amp;ldquo;show me for table xyz which column was changed when and what was the old value and what is the new one&amp;rdquo;. Only changed values should be stored and all tables should log into the same generic logging table. Sounds like we need a generator for this.</description>
    </item>
    
    <item>
      <title>Markdown for Oracle APEX</title>
      <link>https://ogobrecht.github.io/posts/2016-01-01-markdown-for-oracle-apex/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ogobrecht.github.io/posts/2016-01-01-markdown-for-oracle-apex/</guid>
      <description>Some years ago I implemented a task board in APEX. For commenting I used the stackexchange markdown implementation (old Google code repo), which is a pure JavaScript converter and editor and based on showdown.js.
Some months ago I had to implement an application, which should be able to have multiple editors on one page and the editors should be able to support a read only mode. Furthermore there were hard limits for the amount of text for each editor.</description>
    </item>
    
    <item>
      <title>D3.js Force-Directed Network Chart</title>
      <link>https://ogobrecht.github.io/posts/2015-02-20-d3js-force-directed-network-chart/</link>
      <pubDate>Fri, 20 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ogobrecht.github.io/posts/2015-02-20-d3js-force-directed-network-chart/</guid>
      <description>My first Oracle APEX plugin and open source project :-)
Everything started some months ago when I stumbled over this fascinating force-directed graph. I immediately had the idea to use this technology to visualize data models in APEX. My experience is, that direct after I documented a data model, this documentation is out of date. I wanted to have a live visualization of the data models. After the first implementation it turned out, that the resulting graph is also useful for other purposes and I decided to build up an APEX plugin for easier integration.</description>
    </item>
    
  </channel>
</rss>